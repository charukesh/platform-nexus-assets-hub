
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://lkenxwnqoazfdoabrpxl.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxrZW54d25xb2F6ZmRvYWJycHhsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM1MTE2OTUsImV4cCI6MjA1OTA4NzY5NX0.bHtOSGHRh5Z_wH-EHCIpCCG1TYhN3pE7g73EQBpNSr4";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Check storage buckets once at startup, but don't try to create them
// since we've set them up with proper RLS policies
const initializeStorage = async () => {
  try {
    // Just log information about the existing buckets
    const { data: platformLogosData, error: platformLogosError } = await supabase.storage.getBucket('platform-logos');
    
    if (platformLogosError) {
      console.error('Error checking platform-logos bucket:', platformLogosError);
    } else {
      console.log('Platform-logos bucket exists:', platformLogosData);
    }

    // Check if the assets bucket exists
    const { data: assetsData, error: assetsError } = await supabase.storage.getBucket('assets');
    
    if (assetsError) {
      console.error('Error checking assets bucket:', assetsError);
    } else {
      console.log('Assets bucket exists:', assetsData);
    }
  } catch (error) {
    console.error('Storage initialization error:', error);
  }
};

// Call the initialization function
initializeStorage();
